name: CD Production

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}

jobs:
  docker:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🧱 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📦 Read version from package.json
        id: get_version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: 🏗️ Build and tag Docker image
        run: |
          docker build \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$VERSION \
            ./

      - name: 🚀 Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$VERSION

  deploy_vps:
    name: 🚀 Deploy VPS
    runs-on: ubuntu-latest
    needs: [ docker ]
    if: github.ref == 'refs/heads/main'
    env:
      VERSION: unknown
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧾 Read version from package.json
        id: pkg
        run: echo "version=$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"

      - name: 📡 Add SSH host to known_hosts
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: 🔐 Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 📡 Update docker service via SSH
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
          cd ~/../../mnt/containers/test-apps/api && \
          sudo docker compose pull && \
          sudo docker compose up -d --build && \
          sudo docker image prune -f
          "
